/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.resource.generated.tables;


import edu.uci.ics.texera.web.resource.generated.Indexes;
import edu.uci.ics.texera.web.resource.generated.Keys;
import edu.uci.ics.texera.web.resource.generated.Texera;
import edu.uci.ics.texera.web.resource.generated.tables.records.DictownshipRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictownship extends TableImpl<DictownshipRecord> {

    private static final long serialVersionUID = 1469216643;

    /**
     * The reference instance of <code>texera.dictownship</code>
     */
    public static final Dictownship DICTOWNSHIP = new Dictownship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictownshipRecord> getRecordType() {
        return DictownshipRecord.class;
    }

    /**
     * The column <code>texera.dictownship.userID</code>.
     */
    public final TableField<DictownshipRecord, Integer> USERID = createField(DSL.name("userID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>texera.dictownship.dictID</code>.
     */
    public final TableField<DictownshipRecord, Integer> DICTID = createField(DSL.name("dictID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * Create a <code>texera.dictownship</code> table reference
     */
    public Dictownship() {
        this(DSL.name("dictownship"), null);
    }

    /**
     * Create an aliased <code>texera.dictownship</code> table reference
     */
    public Dictownship(String alias) {
        this(DSL.name(alias), DICTOWNSHIP);
    }

    /**
     * Create an aliased <code>texera.dictownship</code> table reference
     */
    public Dictownship(Name alias) {
        this(alias, DICTOWNSHIP);
    }

    private Dictownship(Name alias, Table<DictownshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dictownship(Name alias, Table<DictownshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dictownship(Table<O> child, ForeignKey<O, DictownshipRecord> key) {
        super(child, key, DICTOWNSHIP);
    }

    @Override
    public Schema getSchema() {
        return Texera.TEXERA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICTOWNSHIP_DICTID, Indexes.DICTOWNSHIP_PRIMARY, Indexes.DICTOWNSHIP_USERID);
    }

    @Override
    public Identity<DictownshipRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DICTOWNSHIP;
    }

    @Override
    public UniqueKey<DictownshipRecord> getPrimaryKey() {
        return Keys.KEY_DICTOWNSHIP_PRIMARY;
    }

    @Override
    public List<UniqueKey<DictownshipRecord>> getKeys() {
        return Arrays.<UniqueKey<DictownshipRecord>>asList(Keys.KEY_DICTOWNSHIP_PRIMARY);
    }

    @Override
    public List<ForeignKey<DictownshipRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DictownshipRecord, ?>>asList(Keys.DICTOWNSHIP_IBFK_1, Keys.DICTOWNSHIP_IBFK_2);
    }

    public Useraccount useraccount() {
        return new Useraccount(this, Keys.DICTOWNSHIP_IBFK_1);
    }

    public Userdict userdict() {
        return new Userdict(this, Keys.DICTOWNSHIP_IBFK_2);
    }

    @Override
    public Dictownship as(String alias) {
        return new Dictownship(DSL.name(alias), this);
    }

    @Override
    public Dictownship as(Name alias) {
        return new Dictownship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictownship rename(String name) {
        return new Dictownship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictownship rename(Name name) {
        return new Dictownship(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
